use pnet_macros_support::types::*;
use std::mem;

const FIXED_SIZE_COMPONENT: usize =
	std::mem::size_of::<u16>() +
	std::mem::size_of::<u32>();

// NOTE: pnet macro limitations disallow doc comments for now...

#[packet]
/// Packet format for Discord's
/// [IP Discovery](https://discordapp.com/developers/docs/topics/voice-connections#ip-discovery),
/// used in NAT tunnelling.
///
/// A description of fields:
///
/// ## [`pkt_type`]
/// Denotes whether this packet is a request or response.
///
/// ## [`length`]
/// Length (in bytes) of all successive fields.
/// This controls the string length of [`address`].
///
/// In ordinary use, this should be set to 70.
///
/// ## [`ssrc`]
/// SSRC that the requesting client has been assigned to use over RTP.
///
/// ## [`address`]
/// Null-terminated C-string containing the address of the
/// requester as seen by the server.
///
/// Requests should leave this empty.
///
/// ## [`port`]
/// Client's source port, as seen by the server.
///
/// Requests may include their destination port.
///
/// ## [`payload`]
/// No payload exists for this packet type: 0-length.
///
/// [`pkt_type`]: #structfield.pkt_type
/// [`length`]: #structfield.length
/// [`ssrc`]: #structfield.ssrc
/// [`address`]: #structfield.address
/// [`port`]: #structfield.port
/// [`payload`]: #structfield.payload
pub struct IpDiscovery {
	#[construct_with(u16be)]
	pub pkt_type: IpDiscoveryType,

	pub length: u16be,

	pub ssrc: u32be,
	#[length = "length - FIXED_SIZE_COMPONENT"]
	pub address: Vec<u8>,

	pub port: u16be,

	#[payload]
	#[length = "0"]
	pub payload: Vec<u8>
}